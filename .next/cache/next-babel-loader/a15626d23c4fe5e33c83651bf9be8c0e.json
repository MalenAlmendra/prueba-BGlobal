{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Malen\\\\Desktop\\\\prueba-bglobal\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Posts from '../components/Posts';\nimport Tags from '../components/Tags';\nimport fetch from 'isomorphic-unfetch';\nimport '../styles/style.css';\n\nconst Index = props => __jsx(\"div\", {\n  className: \"container\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7\n  },\n  __self: this\n}, __jsx(\"div\", {\n  className: \"title\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8\n  },\n  __self: this\n}, __jsx(\"h1\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9\n  },\n  __self: this\n}, \"Acumulado Grilla\")), __jsx(Tags, {\n  tags: props.tags,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n}), __jsx(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}, __jsx(Posts, {\n  articles: props.articles,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}))); //Elimina los objetos duplicados. Se utiliza para eliminar las tags repetidas\n\n\nconst deleteDuplicates = (arr, prop) => {\n  let newArray = [];\n  let lookup = {};\n\n  for (let i in arr) {\n    lookup[arr[i][prop]] = arr[i];\n  }\n\n  for (let i in lookup) {\n    newArray.push(lookup[i]);\n  }\n\n  return newArray;\n};\n\nIndex.getInitialProps = async req => {\n  const data = await fetch('https://api-test-ln.herokuapp.com/articles');\n  const res = await data.json();\n  let tags = [];\n\n  for (const art of res.articles) {\n    for (const tag of art.taxonomy.tags) {\n      tags.push(tag);\n    }\n  }\n\n  tags = deleteDuplicates(tags, 'text');\n  return {\n    articles: res.articles,\n    tags: tags.sort(function (a, b) {\n      if (a.text > b.text) {\n        return 1;\n      }\n\n      if (a.text < b.text) {\n        return -1;\n      }\n\n      return 0;\n    })\n  };\n};\n\nexport default Index;","map":{"version":3,"sources":["C:/Users/Malen/Desktop/prueba-bglobal/pages/index.js"],"names":["Posts","Tags","fetch","Index","props","tags","articles","deleteDuplicates","arr","prop","newArray","lookup","i","push","getInitialProps","req","data","res","json","art","tag","taxonomy","sort","a","b","text"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,qBAAlB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAO,qBAAP;;AAEA,MAAMC,KAAK,GAAEC,KAAD,IACR;AAAK,EAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI;AAAK,EAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,CADJ,EAII,MAAC,IAAD;AAAM,EAAA,IAAI,EAAEA,KAAK,CAACC,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAJJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,MAAC,KAAD;AAAO,EAAA,QAAQ,EAAED,KAAK,CAACE,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,CALJ,CADJ,C,CAaA;;;AAEA,MAAMC,gBAAgB,GAAC,CAACC,GAAD,EAAKC,IAAL,KAAY;AAC/B,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,MAAM,GAAI,EAAd;;AAEC,OAAK,IAAIC,CAAT,IAAcJ,GAAd,EAAmB;AACfG,IAAAA,MAAM,CAACH,GAAG,CAACI,CAAD,CAAH,CAAOH,IAAP,CAAD,CAAN,GAAuBD,GAAG,CAACI,CAAD,CAA1B;AACH;;AAED,OAAK,IAAIA,CAAT,IAAcD,MAAd,EAAsB;AAClBD,IAAAA,QAAQ,CAACG,IAAT,CAAcF,MAAM,CAACC,CAAD,CAApB;AACH;;AAED,SAAOF,QAAP;AACJ,CAbD;;AAeAP,KAAK,CAACW,eAAN,GAAsB,MAAMC,GAAN,IAAY;AAC9B,QAAMC,IAAI,GAAE,MAAMd,KAAK,CAAC,4CAAD,CAAvB;AACA,QAAMe,GAAG,GAAG,MAAMD,IAAI,CAACE,IAAL,EAAlB;AACA,MAAIb,IAAI,GAAC,EAAT;;AAEA,OAAK,MAAMc,GAAX,IAAkBF,GAAG,CAACX,QAAtB,EAAgC;AAC5B,SAAK,MAAMc,GAAX,IAAkBD,GAAG,CAACE,QAAJ,CAAahB,IAA/B,EAAqC;AACjCA,MAAAA,IAAI,CAACQ,IAAL,CAAUO,GAAV;AACH;AACJ;;AAEDf,EAAAA,IAAI,GAACE,gBAAgB,CAACF,IAAD,EAAM,MAAN,CAArB;AAEA,SAAM;AACFC,IAAAA,QAAQ,EAACW,GAAG,CAACX,QADX;AAEFD,IAAAA,IAAI,EAACA,IAAI,CAACiB,IAAL,CAAU,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC3B,UAAID,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB;AACnB,eAAO,CAAP;AACD;;AACD,UAAIF,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB;AACnB,eAAO,CAAC,CAAR;AACD;;AACD,aAAO,CAAP;AACD,KARE;AAFH,GAAN;AAaH,CA1BD;;AA6BA,eAAetB,KAAf","sourcesContent":["import Posts from '../components/Posts'\r\nimport Tags from '../components/Tags'\r\nimport fetch from 'isomorphic-unfetch'\r\nimport '../styles/style.css'\r\n\r\nconst Index=(props)=>(\r\n    <div className='container'>\r\n        <div className=\"title\">\r\n            <h1>Acumulado Grilla</h1>\r\n        </div>\r\n        <Tags tags={props.tags}/>\r\n        <div>\r\n            <Posts articles={props.articles} />\r\n            \r\n        </div>\r\n    </div>\r\n)\r\n\r\n//Elimina los objetos duplicados. Se utiliza para eliminar las tags repetidas\r\n\r\nconst deleteDuplicates=(arr,prop)=>{\r\n    let newArray = [];\r\n    let lookup  = {};\r\n \r\n     for (let i in arr) {\r\n         lookup[arr[i][prop]] = arr[i];\r\n     }\r\n \r\n     for (let i in lookup) {\r\n         newArray.push(lookup[i]);\r\n     }\r\n \r\n     return newArray;\r\n}\r\n\r\nIndex.getInitialProps=async(req)=>{\r\n    const data= await fetch('https://api-test-ln.herokuapp.com/articles')\r\n    const res = await data.json()\r\n    let tags=[]\r\n\r\n    for (const art of res.articles) {\r\n        for (const tag of art.taxonomy.tags) {\r\n            tags.push(tag)\r\n        }\r\n    }\r\n\r\n    tags=deleteDuplicates(tags,'text')\r\n\r\n    return{\r\n        articles:res.articles,\r\n        tags:tags.sort(function (a, b) {\r\n            if (a.text > b.text) {\r\n              return 1;\r\n            }\r\n            if (a.text < b.text) {\r\n              return -1;\r\n            }\r\n            return 0;\r\n          })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default Index"]},"metadata":{},"sourceType":"module"}